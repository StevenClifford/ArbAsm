cmp loop, 0 			; This program compresses the entire stack into two numbers,
Ce pop gr1 				; one containing the number data, the other the individual lengths, and pushes those to the stack again.
Ce set gr4, 0 			; Note that the numbers in the stack should be positive, or this will go horribly wrong

pop gr2 				; takes the top element of the stack
len gr2, gr3 			; gets its length
shf gr1, gr3 			; shifts the complete-stack-register by that length to make space
add gr1, gr2 			; adds the number to complete-stack-register
add gr4, gr3 			; add the length to the length-data-register
shf gr4, 10 			; shifts the length-data-register by a reasonable amount, ready for the next length to be added

set loop, 1
cmp mstptr, stacsz 		; looks at if the bottom of the stack has been reached, if it has:
Ce push gr1 			; pushes complete-stack-register to the stack
Ce push gr4 			; pushes length-data-register to the stack
Ce set loop, 0 			; The stack now looks like this: top ( length-data-register   complete-stack-register ) bottom
